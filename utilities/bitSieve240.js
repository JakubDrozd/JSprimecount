//
//        BitSieve240.js
//        BitSieve240 contains lookup tables that are
//        needed to implement a prime sieving algorithm where each
//        bit corresponds to an integer that is not divisible by 2,
//        3 and 5. The 8 bits of each byte correspond to the offsets
//        { 1, 7, 11, 13, 17, 19, 23, 29 }. Since the sieve array
//        uses 64-bit BigInts, one sieve array element
//        (8 bytes) corresponds to an interval of size 30 * 8 = 240.
//
// Copyright Â© 2021 Jakub Drozd, <Kuba.drozd09@wp.pl>
//
// This file is distributed under the GPL v3 license, for full notice see main.js in the top level directory.
//

class BitSieve240 {
  constructor() {
    // pi(x) for x < 6
    this.piSmall_ = [0n, 0n, 1n, 2n, 2n, 3n];
    // Bitmasks needed to set a specific bit in the sieve array
    this.setBit_ = [
      0n, 1n, 0n, 0n, 0n, 0n, 0n, 2n, 0n, 0n, 0n, 4n, 0n,
      8n, 0n, 0n, 0n, 16n, 0n, 32n, 0n, 0n, 0n, 64n, 0n,
      0n, 0n, 0n, 0n, 128n, 0n, 256n, 0n, 0n, 0n, 0n, 0n,
      512n, 0n, 0n, 0n, 1024n, 0n, 2048n, 0n, 0n, 0n,
      4096n, 0n, 8192n, 0n, 0n, 0n, 16384n, 0n, 0n, 0n,
      0n, 0n, 32768n, 0n, 65536n, 0n, 0n, 0n, 0n, 0n,
      131072n, 0n, 0n, 0n, 262144n, 0n, 524288n, 0n,
      0n, 0n, 1048576n, 0n, 2097152n, 0n, 0n, 0n,
      4194304n, 0n, 0n, 0n, 0n, 0n, 8388608n, 0n,
      16777216n, 0n, 0n, 0n, 0n, 0n, 33554432n, 0n, 0n,
      0n, 67108864n, 0n, 134217728n, 0n, 0n, 0n,
      268435456n, 0n, 536870912n, 0n, 0n, 0n,
      1073741824n, 0n, 0n, 0n, 0n, 0n, 2147483648n,
      0n, 4294967296n, 0n, 0n, 0n, 0n, 0n,
      8589934592n, 0n, 0n, 0n, 17179869184n, 0n,
      34359738368n, 0n, 0n, 0n, 68719476736n, 0n,
      137438953472n, 0n, 0n, 0n, 274877906944n, 0n,
      0n, 0n, 0n, 0n, 549755813888n, 0n,
      1099511627776n, 0n, 0n, 0n, 0n, 0n,
      2199023255552n, 0n, 0n, 0n, 4398046511104n,
      0n, 8796093022208n, 0n, 0n, 0n,
      17592186044416n, 0n, 35184372088832n, 0n, 0n,
      0n, 70368744177664n, 0n, 0n, 0n, 0n, 0n,
      140737488355328n, 0n, 281474976710656n, 0n,
      0n, 0n, 0n, 0n, 562949953421312n, 0n, 0n, 0n,
      1125899906842624n, 0n, 2251799813685248n,
      0n, 0n, 0n, 4503599627370496n, 0n,
      9007199254740992n, 0n, 0n, 0n,
      18014398509481984n, 0n, 0n, 0n, 0n, 0n,
      36028797018963968n, 0n, 72057594037927936n,
      0n, 0n, 0n, 0n, 0n, 144115188075855872n, 0n, 0n,
      0n, 288230376151711744n, 0n,
      576460752303423488n, 0n, 0n, 0n,
      1152921504606846976n, 0n,
      2305843009213693952n, 0n, 0n, 0n,
      4611686018427387904n, 0n, 0n, 0n, 0n, 0n,
      9223372036854775808n
    ];
    // Bitmasks needed to unset a specific bit in the sieve array
    this.unsetBit_ = [
      18446744073709551615n, 18446744073709551614n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n,
      18446744073709551615n, 18446744073709551613n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551611n,
      18446744073709551615n, 18446744073709551607n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551599n,
      18446744073709551615n, 18446744073709551583n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551551n,
      18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551487n,
      18446744073709551615n, 18446744073709551359n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n,
      18446744073709551615n, 18446744073709551103n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709550591n,
      18446744073709551615n, 18446744073709549567n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709547519n,
      18446744073709551615n, 18446744073709543423n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709535231n,
      18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709518847n,
      18446744073709551615n, 18446744073709486079n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n,
      18446744073709551615n, 18446744073709420543n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709289471n,
      18446744073709551615n, 18446744073709027327n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073708503039n,
      18446744073709551615n, 18446744073707454463n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073705357311n,
      18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073701163007n,
      18446744073709551615n, 18446744073692774399n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n,
      18446744073709551615n, 18446744073675997183n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073642442751n,
      18446744073709551615n, 18446744073575333887n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073441116159n,
      18446744073709551615n, 18446744073172680703n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744072635809791n,
      18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744071562067967n,
      18446744073709551615n, 18446744069414584319n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n,
      18446744073709551615n, 18446744065119617023n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744056529682431n,
      18446744073709551615n, 18446744039349813247n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744004990074879n,
      18446744073709551615n, 18446743936270598143n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446743798831644671n,
      18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446743523953737727n,
      18446744073709551615n, 18446742974197923839n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n,
      18446744073709551615n, 18446741874686296063n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446739675663040511n,
      18446744073709551615n, 18446735277616529407n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446726481523507199n,
      18446744073709551615n, 18446708889337462783n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446673704965373951n,
      18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446603336221196287n,
      18446744073709551615n, 18446462598732840959n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n,
      18446744073709551615n, 18446181123756130303n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18445618173802708991n,
      18446744073709551615n, 18444492273895866367n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18442240474082181119n,
      18446744073709551615n, 18437736874454810623n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18428729675200069631n,
      18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18410715276690587647n,
      18446744073709551615n, 18374686479671623679n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n,
      18446744073709551615n, 18302628885633695743n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18158513697557839871n,
      18446744073709551615n, 17870283321406128127n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 17293822569102704639n,
      18446744073709551615n, 16140901064495857663n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 13835058055282163711n,
      18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 18446744073709551615n, 9223372036854775807n
    ];
    // Unset bits > stop
    this.unsetLarger_ = [
      0n, 1n, 1n, 1n, 1n, 1n, 1n, 3n, 3n, 3n, 3n, 7n, 7n, 15n, 15n, 15n, 15n, 31n, 31n, 63n, 63n,
      63n, 63n, 127n, 127n, 127n, 127n, 127n, 127n, 255n, 255n, 511n, 511n, 511n, 511n,
      511n, 511n, 1023n, 1023n, 1023n, 1023n, 2047n, 2047n, 4095n, 4095n, 4095n, 4095n,
      8191n, 8191n, 16383n, 16383n, 16383n, 16383n, 32767n, 32767n, 32767n, 32767n,
      32767n, 32767n, 65535n, 65535n, 131071n, 131071n, 131071n, 131071n, 131071n,
      131071n, 262143n, 262143n, 262143n, 262143n, 524287n, 524287n, 1048575n,
      1048575n, 1048575n, 1048575n, 2097151n, 2097151n, 4194303n, 4194303n,
      4194303n, 4194303n, 8388607n, 8388607n, 8388607n, 8388607n, 8388607n,
      8388607n, 16777215n, 16777215n, 33554431n, 33554431n, 33554431n, 33554431n,
      33554431n, 33554431n, 67108863n, 67108863n, 67108863n, 67108863n, 134217727n,
      134217727n, 268435455n, 268435455n, 268435455n, 268435455n, 536870911n,
      536870911n, 1073741823n, 1073741823n, 1073741823n, 1073741823n, 2147483647n,
      2147483647n, 2147483647n, 2147483647n, 2147483647n, 2147483647n,
      4294967295n, 4294967295n, 8589934591n, 8589934591n, 8589934591n,
      8589934591n, 8589934591n, 8589934591n, 17179869183n, 17179869183n,
      17179869183n, 17179869183n, 34359738367n, 34359738367n, 68719476735n,
      68719476735n, 68719476735n, 68719476735n, 137438953471n, 137438953471n,
      274877906943n, 274877906943n, 274877906943n, 274877906943n, 549755813887n,
      549755813887n, 549755813887n, 549755813887n, 549755813887n, 549755813887n,
      1099511627775n, 1099511627775n, 2199023255551n, 2199023255551n,
      2199023255551n, 2199023255551n, 2199023255551n, 2199023255551n,
      4398046511103n, 4398046511103n, 4398046511103n, 4398046511103n,
      8796093022207n, 8796093022207n, 17592186044415n, 17592186044415n,
      17592186044415n, 17592186044415n, 35184372088831n, 35184372088831n,
      70368744177663n, 70368744177663n, 70368744177663n, 70368744177663n,
      140737488355327n, 140737488355327n, 140737488355327n, 140737488355327n,
      140737488355327n, 140737488355327n, 281474976710655n, 281474976710655n,
      562949953421311n, 562949953421311n, 562949953421311n, 562949953421311n,
      562949953421311n, 562949953421311n, 1125899906842623n, 1125899906842623n,
      1125899906842623n, 1125899906842623n, 2251799813685247n,
      2251799813685247n, 4503599627370495n, 4503599627370495n,
      4503599627370495n, 4503599627370495n, 9007199254740991n,
      9007199254740991n, 18014398509481983n, 18014398509481983n,
      18014398509481983n, 18014398509481983n, 36028797018963967n,
      36028797018963967n, 36028797018963967n, 36028797018963967n,
      36028797018963967n, 36028797018963967n, 72057594037927935n,
      72057594037927935n, 144115188075855871n, 144115188075855871n,
      144115188075855871n, 144115188075855871n, 144115188075855871n,
      144115188075855871n, 288230376151711743n, 288230376151711743n,
      288230376151711743n, 288230376151711743n, 576460752303423487n,
      576460752303423487n, 1152921504606846975n, 1152921504606846975n,
      1152921504606846975n, 1152921504606846975n, 2305843009213693951n,
      2305843009213693951n, 4611686018427387903n, 4611686018427387903n,
      4611686018427387903n, 4611686018427387903n, 9223372036854775807n,
      9223372036854775807n, 9223372036854775807n, 9223372036854775807n,
      9223372036854775807n, 9223372036854775807n, 18446744073709551615n
    ];
  }
}

module.exports = BitSieve240;